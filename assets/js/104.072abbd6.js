(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{671:function(t,s,a){"use strict";a.r(s);var e=a(7),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("在逛 B站的时候发现一套Udemy上的SSR教程, 教你如何手写SSR基本框架，虽然项目中暂时还没有用到的机会，但秉承着艺多不压身的原则，花了一天时间过完了，简单做个记录，后续有需要的时候再细看。")]),t._v(" "),a("h2",{attrs:{id:"ssr-的优缺点及适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssr-的优缺点及适用场景"}},[t._v("#")]),t._v(" SSR 的优缺点及适用场景")]),t._v(" "),a("h3",{attrs:{id:"ssr的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssr的优势"}},[t._v("#")]),t._v(" SSR的优势")]),t._v(" "),a("p",[t._v("与 CSR(client-side-rendering)相比， SSR具有以下优势：")]),t._v(" "),a("h4",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("网络链路：省去了客户端二次请求数据的网络传输开销，服务端的网络环境要优于客户端，内部服务器之间通信路径也更短")])]),t._v(" "),a("li",[a("p",[t._v("内容呈现： 首屏加载时间（FCP）更快，浏览器内容解析优化机制能够发挥作用")])])]),t._v(" "),a("h4",{attrs:{id:"可访问性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可访问性"}},[t._v("#")]),t._v(" 可访问性")]),t._v(" "),a("p",[t._v("相比CSR的空壳首页而言，SSR首屏的页面要丰富得多.\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/chenxiaoyao6228/cloudimg@main/2023/ssr-juejin.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"ssr的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssr的缺点"}},[t._v("#")]),t._v(" SSR的缺点")]),t._v(" "),a("ul",[a("li",[t._v("改造成本大：存量的CSR代码实现改造困难")]),t._v(" "),a("li",[t._v("服务的稳定性和性能要求以及服务器的成本")]),t._v(" "),a("li",[t._v("配套设施的建设")])]),t._v(" "),a("h3",{attrs:{id:"ssr-的适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssr-的适用场景"}},[t._v("#")]),t._v(" SSR 的适用场景")]),t._v(" "),a("p",[t._v("内容密集型页面，如稀土掘金这类门户网站，以及公司官网。")]),t._v(" "),a("h2",{attrs:{id:"ssr-涉及的技术点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssr-涉及的技术点"}},[t._v("#")]),t._v(" SSR 涉及的技术点")]),t._v(" "),a("h3",{attrs:{id:"首页请求的时候-如何将组件转化为-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首页请求的时候-如何将组件转化为-html"}},[t._v("#")]),t._v(" 首页请求的时候，如何将组件转化为 HTML")]),t._v(" "),a("ul",[a("li",[t._v("如何在server端跑jsx => 跑webpack将生成bundle, 然后重启server, (nodemon自动重启)")]),t._v(" "),a("li",[t._v("将 JS 组件转化为html => ReactDOM.renderToString()")])]),t._v(" "),a("h3",{attrs:{id:"如何根据不同的用户路由进入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何根据不同的用户路由进入"}},[t._v("#")]),t._v(" 如何根据不同的用户路由进入")]),t._v(" "),a("p",[t._v("在node层劫持"),a("code",[t._v("req.path")]),t._v(", 再根据act-router-config匹配出对应的组件，再进行渲染")]),t._v(" "),a("h3",{attrs:{id:"server端和client端有两个完全不一样的store-该如何处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server端和client端有两个完全不一样的store-该如何处理"}},[t._v("#")]),t._v(" server端和client端有两个完全不一样的store， 该如何处理")]),t._v(" "),a("ul",[a("li",[t._v("server注入JSON数据")]),t._v(" "),a("li",[t._v("client初始化store的时候使用该store")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  reducers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INITIAL_STATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withExtraArgument")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("axiosInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("p",[t._v("😃 Update:  这点其实可以借鉴，如果项目中有node作为 BFF层的话， 可以把用户登录相关的请求在node层处理，注入到html, 再进行脱水")])]),t._v(" "),a("blockquote",[a("p",[t._v("旧模式:\n客户端页面的展示流程为："),a("code",[t._v("获取 index.html => 获取 bundle.js => 执行 bundle.js => 发起 checkToken 请求 => 发起 getUserInfo 请求 => 渲染页面元素")]),t._v("。用户已登录的情况下，页面至少需要等 4RTT 时间后才能进行正常的页面渲染，而未登录的情况下，也需要 3RTT 时间后才能跳转到登录页。")])]),t._v(" "),a("blockquote",[a("p",[t._v("新模式:\n为了减少页面的 RTT，让页面尽快进入渲染状态，所以在用户第一次请求时，就尝试把用户信息注入到页面中，此过程称为注水。在页面首次 dom 解析时，将注入的信息挂载到 window 对象上，在 umi.js 执行时将 window 上的用户信息存储到内存中，并销毁 window 上的用户信息，此过程称为脱水。\n经过用户信息的注水与脱水，页面的渲染流程变为："),a("code",[t._v("获取 index.html => => 执行 bundle.js => 渲染页面元素")]),t._v("。用户已登录的情况下，只需要 2RTT 即可正常渲染页面，用户未登录的情况下，只需要 1RTT 即可跳转到登录页面。")])]),t._v(" "),a("h3",{attrs:{id:"如何防止xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何防止xss-攻击"}},[t._v("#")]),t._v(" 如何防止XSS 攻击")]),t._v(" "),a("p",[t._v("不能简单地用 JSON.stringify")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INITIAL_STATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("serialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("ul",[a("li",[t._v("在SSR: api出错等异常的时候，如何保证用户体验？")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV194411t7aq",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSR - server side rendering with react and redux"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://www.ayqy.net/blog/ssr-pros-and-cons/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSR的利与弊"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);